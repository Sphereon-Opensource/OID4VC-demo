diff --git a/build/action-handler.js b/build/action-handler.js
index d941dae4714a1df200bd952721a690850a7db902..878fef24c670a9a782747bf25f703176567b8a5f 100644
--- a/build/action-handler.js
+++ b/build/action-handler.js
@@ -87,7 +87,7 @@ class CredentialPlugin {
                 throw new Error('invalid_argument: presentation.holder must be a DID managed by this agent');
             }
             //FIXME: `args` should allow picking a key or key type
-            const key = identifier.keys.find((k) => k.type === 'Secp256k1' || k.type === 'Ed25519');
+            const key = identifier.keys.find((k) => k.type === 'Secp256k1' || k.type === 'Secp256r1' || k.type === 'Ed25519');
             if (!key)
                 throw Error('key_not_found: No signing key for ' + identifier.did);
             let verifiablePresentation;
@@ -117,6 +117,8 @@ class CredentialPlugin {
                 let alg = 'ES256K';
                 if (key.type === 'Ed25519') {
                     alg = 'EdDSA';
+                } else if (key.type === 'Secp256r1' || key.type === 'ES256') {
+                    alg = 'ES256';
                 }
                 const signer = wrapSigner(context, key, alg);
                 const jwt = yield (0, did_jwt_vc_1.createVerifiablePresentationJwt)(presentation, { did: identifier.did, signer, alg }, Object.assign({ removeOriginalFields, challenge, domain }, otherOptions));
@@ -174,14 +176,17 @@ class CredentialPlugin {
                 }
                 else {
                     //FIXME: `args` should allow picking a key or key type
-                    const key = identifier.keys.find((k) => k.type === 'Secp256k1' || k.type === 'Ed25519');
+                    const key = identifier.keys.find((k) => k.type === 'Secp256k1' ||  k.type === 'Secp256r1' || k.type === 'Ed25519');
                     if (!key)
                         throw Error('No signing key for ' + identifier.did);
                     debug('Signing VC with', identifier.did);
                     let alg = 'ES256K';
                     if (key.type === 'Ed25519') {
                         alg = 'EdDSA';
+                    } else if (key.type === 'Secp256r1' || key.type === 'ES256') {
+                        alg = 'ES256';
                     }
+
                     const signer = wrapSigner(context, key, alg);
                     const jwt = yield (0, did_jwt_vc_1.createVerifiableCredentialJwt)(credential, { did: identifier.did, signer, alg }, Object.assign({ removeOriginalFields }, otherOptions));
                     //FIXME: flagging this as a potential privacy leak.
diff --git a/src/action-handler.ts b/src/action-handler.ts
index ca8d51ba0099cfd1817576beb948bcae98fb2452..9f85183fe5f9c3f75e188143afe8780bbcf77a1a 100644
--- a/src/action-handler.ts
+++ b/src/action-handler.ts
@@ -58,7 +58,7 @@ const debug = Debug('veramo:w3c:action-handler')
  */
 export class CredentialPlugin implements IAgentPlugin {
   readonly methods: ICredentialPlugin
-  readonly schema = { 
+  readonly schema = {
     components: {
       schemas: {
         ...schema.ICredentialIssuer.components.schemas,
@@ -129,7 +129,7 @@ export class CredentialPlugin implements IAgentPlugin {
       throw new Error('invalid_argument: presentation.holder must be a DID managed by this agent')
     }
     //FIXME: `args` should allow picking a key or key type
-    const key = identifier.keys.find((k) => k.type === 'Secp256k1' || k.type === 'Ed25519')
+    const key = identifier.keys.find((k) => k.type === 'Secp256k1' || k.type === 'Secp256r1' || k.type === 'Ed25519')
     if (!key) throw Error('key_not_found: No signing key for ' + identifier.did)
 
     let verifiablePresentation: VerifiablePresentation
@@ -164,6 +164,8 @@ export class CredentialPlugin implements IAgentPlugin {
       let alg = 'ES256K'
       if (key.type === 'Ed25519') {
         alg = 'EdDSA'
+      } else if (key.type === 'Secp256r1' || key.type === 'ES256') {
+        alg = 'ES256';
       }
       const signer = wrapSigner(context, key, alg)
 
@@ -235,13 +237,15 @@ export class CredentialPlugin implements IAgentPlugin {
         }
       } else {
         //FIXME: `args` should allow picking a key or key type
-        const key = identifier.keys.find((k) => k.type === 'Secp256k1' || k.type === 'Ed25519')
+        const key = identifier.keys.find((k) => k.type === 'Secp256k1' || k.type === 'Secp256r1' || k.type === 'Ed25519')
         if (!key) throw Error('No signing key for ' + identifier.did)
 
         debug('Signing VC with', identifier.did)
         let alg = 'ES256K'
         if (key.type === 'Ed25519') {
           alg = 'EdDSA'
+        } else if (key.type === 'Secp256r1' || key.type === 'ES256') {
+          alg = 'ES256';
         }
         const signer = wrapSigner(context, key, alg)
         const jwt = await createVerifiableCredentialJwt(